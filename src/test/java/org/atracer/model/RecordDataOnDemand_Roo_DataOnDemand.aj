// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.atracer.model;

import java.util.List;
import java.util.Random;
import org.atracer.model.PackageNameDataOnDemand;
import org.atracer.model.PackageVersionDataOnDemand;
import org.atracer.model.Record;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect RecordDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RecordDataOnDemand: @Component;
    
    private Random RecordDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Record> RecordDataOnDemand.data;
    
    @Autowired
    private PackageNameDataOnDemand RecordDataOnDemand.packageNameDataOnDemand;
    
    @Autowired
    private PackageVersionDataOnDemand RecordDataOnDemand.packageVersionDataOnDemand;
    
    public Record RecordDataOnDemand.getNewTransientRecord(int index) {
        org.atracer.model.Record obj = new org.atracer.model.Record();
        obj.setPackageName(packageNameDataOnDemand.getRandomPackageName());
        obj.setPackageVersion(packageVersionDataOnDemand.getRandomPackageVersion());
        obj.setStacktrace("stacktrace_" + index);
        return obj;
    }
    
    public Record RecordDataOnDemand.getSpecificRecord(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Record obj = data.get(index);
        return Record.findRecord(obj.getId());
    }
    
    public Record RecordDataOnDemand.getRandomRecord() {
        init();
        Record obj = data.get(rnd.nextInt(data.size()));
        return Record.findRecord(obj.getId());
    }
    
    public boolean RecordDataOnDemand.modifyRecord(Record obj) {
        return false;
    }
    
    public void RecordDataOnDemand.init() {
        data = org.atracer.model.Record.findRecordEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Record' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<org.atracer.model.Record>();
        for (int i = 0; i < 10; i++) {
            org.atracer.model.Record obj = getNewTransientRecord(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
